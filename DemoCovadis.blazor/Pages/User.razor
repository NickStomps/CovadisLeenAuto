@page "/user"
@inject UserHttpClient UserHttpClient;
@inject NavigationManager NavigationManager;
@attribute [Authorize]

@using DemoCovadis.Shared.Dtos;
@using DemoCovadis.Shared.Clients;
@using DemoCovadis.Blazor.Components;
@using Microsoft.AspNetCore.Authorization;
@using DemoCovadis.Shared.Requests;

<PageTitle>Home</PageTitle>
<PageHeader><h5>Users</h5></PageHeader>

@if (Users != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Naam</th>
                <th>Email</th>
                <th>Rol</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in Users)
            {
                <tr>
                    <td>@user.Id</td>
                    <td>@user.Naam</td>
                    <td>@user.Email</td>
                    <td>@string.Join(", ", user.Roles)</td>
                </tr>
            }
        </tbody>
    </table>
}

<div class="d-flex justify-content-center align-items-center login-alignment">
    <div class="form-user">
        <PageHeader><h5>Maak User</h5></PageHeader>

        <EditForm Model="Request" OnSubmit="CreateUser">
            <div class="form-floating mb-3">
                <InputText id="naam" class="form-control" @bind-Value="Request.Naam" placeholder="Naam" />
                <label for="naam">Naam</label>
            </div>

            <div class="form-floating mb-3">
                <InputText id="email" class="form-control" @bind-Value="Request.Email" placeholder="Email" />
                <label for="email">Email address</label>
            </div>

            <div class="form-floating mb-3">
                <InputText id="password" class="form-control" @bind-Value="Request.Wachtwoord" placeholder="Password" type="password" />
                <label for="password">Password</label>
            </div>

            <button class="btn btn-primary w-100 py-2" type="submit">Maak gebruiker</button>
        </EditForm>
    </div>
</div>

@code {
    public UserDto[] Users { get; set; }
    protected override void OnInitialized()
    {
        Console.WriteLine("OnInitialized");
    }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("OnInitializedAsync");
        Users = await UserHttpClient.GetUsers();
    }

    private readonly UserRequest Request = new();

    private async Task CreateUser()
    {
        var response = await UserHttpClient.CreateUser(Request);
        Users = await UserHttpClient.GetUsers();
        NavigationManager.NavigateTo("/user");
    }
}